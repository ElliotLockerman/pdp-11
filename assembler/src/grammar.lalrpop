
use common::asm::*;
use crate::ir::{Cmd, Stmt};
use crate::helpers::parse_int;
use common::{
    double_operand_ins,
    branch_ins,
    jmp_ins,
    jsr_ins,
    rts_ins,
    misc_ins,
    cc_ins,
    single_operand_ins,
    trap_ins,
};

grammar;

R: Reg = {
    "r0" => Reg::R0,
    "r1" => Reg::R1, 
    "r2" => Reg::R2,
    "r3" => Reg::R3,
    "r4" => Reg::R4,
    "r5" => Reg::R5,
    "r6" => Reg::SP,
    "r7" => Reg::PC,

    "sp" => Reg::SP,
    "pc" => Reg::PC,
};

Imm: u16 = {
    r#"-?\d*\."# => {
        let s = <>;
        parse_int(&s[..s.len() - 1], 10)
    },
    r#"-?[0-7]+"# => parse_int(<>, 8),
    r#"'[!-~]"# => {
        let s = <>;
        let mut chars = s.chars();
        chars.next().unwrap();
        chars.next().unwrap() as u8 as u16
    },
    "'\\n" => b'\n' as u16,
    "'\\r" => b'\r' as u16,
    "'\\0" => b'\0' as u16,
    "'\\t" => b'\t' as u16,
    "'\\\"" => b'"' as u16,
    "'\\'" => b'\'' as u16,
    "'\\\\" => b'\\' as u16,
};

Symbol: String = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => <>.to_string();

Atom: Atom = {
    "." => Atom::Loc,
    Imm => Atom::Val(<>),
    Symbol => Atom::SymbolRef(<>),
}

// Evaluated left-to-right, no precedence or parentheses
Expr: Expr = {
    <Atom> => Expr::Atom(<>),
    <e:Expr> "+" <a:Atom> => Expr::Op(Box::new(e), Op::Add, a),
    <e:Expr> "-" <a:Atom> => Expr::Op(Box::new(e), Op::Sub, a),
    <e:Expr> "&" <a:Atom> => Expr::Op(Box::new(e), Op::And, a),
    <e:Expr> "!" <a:Atom> => Expr::Op(Box::new(e), Op::Or, a),
}

 
Operand: Operand = {
    <R> => Operand::new(AddrMode::Gen, <>, Extra::None),
    "@" <R> => Operand::new(AddrMode::Def, <>, Extra::None),
    "(" <R> ")" => Operand::new(AddrMode::Def, <>, Extra::None),
    "(" <R> ")" "+" => Operand::new(AddrMode::AutoInc, <>, Extra::None),
    "@" "(" <R> ")" "+" => Operand::new(AddrMode::AutoIncDef, <>, Extra::None),
    "-" "(" <R> ")" => Operand::new(AddrMode::AutoDec, <>, Extra::None),
    "@" "-" "(" <R> ")" => Operand::new(AddrMode::AutoDecDef, <>, Extra::None),
    <e:Expr> "(" <r:R> ")" => Operand::new(AddrMode::Index, r, Extra::Imm(e)),
    "@" <e:Expr> "(" <r:R> ")" => Operand::new(AddrMode::IndexDef, r, Extra::Imm(e)),

    <Expr> => Operand::new(AddrMode::Index, Reg::PC, Extra::Rel(<>)),
    "@" <Expr> => Operand::new(AddrMode::IndexDef, Reg::PC, Extra::Rel(<>)),
    "#" <Expr> => Operand::new(AddrMode::AutoInc, Reg::PC, Extra::Imm(<>)),
    "@" "#" <Expr> => Operand::new(AddrMode::AutoIncDef, Reg::PC, Extra::Imm(<>)),
};


I: Ins = {
    "halt" => misc_ins!(Halt),
    "wait" => misc_ins!(Wait),
    "rti" => misc_ins!(Rti),

    "mov" <Operand> "," <Operand> => double_operand_ins!(Mov, <>),
    "cmp" <Operand> "," <Operand> => double_operand_ins!(Cmp, <>),
    "bit" <Operand> "," <Operand> => double_operand_ins!(Bit, <>),
    "bic" <Operand> "," <Operand> => double_operand_ins!(Bic, <>),
    "bis" <Operand> "," <Operand> => double_operand_ins!(Bis, <>),
    "add" <Operand> "," <Operand> => double_operand_ins!(Add, <>),

    "movb" <Operand> "," <Operand> => double_operand_ins!(MovB, <>),
    "cmpb" <Operand> "," <Operand> => double_operand_ins!(CmpB, <>),
    "bitb" <Operand> "," <Operand> => double_operand_ins!(BitB, <>),
    "bicb" <Operand> "," <Operand> => double_operand_ins!(BicB, <>),
    "bisb" <Operand> "," <Operand> => double_operand_ins!(BisB, <>),
    "sub" <Operand> "," <Operand> => double_operand_ins!(Sub, <>),

    "br" <Symbol> => branch_ins!(Br, <>),
    "bne" <Symbol> => branch_ins!(Bne, <>),
    "beq" <Symbol> => branch_ins!(Beq, <>),
    "bge" <Symbol> => branch_ins!(Bge, <>),
    "blt" <Symbol> => branch_ins!(Blt, <>),
    "bgt" <Symbol> => branch_ins!(Bgt, <>),
    "ble" <Symbol> => branch_ins!(Ble, <>),

    "bpl" <Symbol> => branch_ins!(Bpl, <>),
    "bmi" <Symbol> => branch_ins!(Bmi, <>),
    "bhi" <Symbol> => branch_ins!(Bhi, <>),
    "bhis" <Symbol> => branch_ins!(Bcc, <>),
    "blo" <Symbol> => branch_ins!(Bcs, <>),
    "blos" <Symbol> => branch_ins!(Blos, <>),
    "bvc" <Symbol> => branch_ins!(Bvc, <>),
    "bvs" <Symbol> => branch_ins!(Bvs, <>),
    "bcc" <Symbol> => branch_ins!(Bcc, <>),
    "bcs" <Symbol> => branch_ins!(Bcs, <>),

    "jmp" <Operand> => jmp_ins!(<>),

    "jsr" <R> "," <Operand> => jsr_ins!(<>),
    "rts" <R>  => rts_ins!(<>),

    "clr" <Operand> => single_operand_ins!(Clr, <>),
    "com" <Operand> => single_operand_ins!(Com, <>),
    "inc" <Operand> => single_operand_ins!(Inc, <>),
    "dec" <Operand> => single_operand_ins!(Dec, <>),
    "neg" <Operand> => single_operand_ins!(Neg, <>),
    "adc" <Operand> => single_operand_ins!(Adc, <>),
    "sbc" <Operand> => single_operand_ins!(Sbc, <>),
    "tst" <Operand> => single_operand_ins!(Tst, <>),
    "ror" <Operand> => single_operand_ins!(Ror, <>),
    "rol" <Operand> => single_operand_ins!(Rol, <>),
    "asr" <Operand> => single_operand_ins!(Asr, <>),
    "asl" <Operand> => single_operand_ins!(Asl, <>),

    "clrb" <Operand> => single_operand_ins!(ClrB, <>),
    "comb" <Operand> => single_operand_ins!(ComB, <>),
    "incb" <Operand> => single_operand_ins!(IncB, <>),
    "decb" <Operand> => single_operand_ins!(DecB, <>),
    "negb" <Operand> => single_operand_ins!(NegB, <>),
    "adcb" <Operand> => single_operand_ins!(AdcB, <>),
    "sbcb" <Operand> => single_operand_ins!(SbcB, <>),
    "tstb" <Operand> => single_operand_ins!(TstB, <>),
    "rorb" <Operand> => single_operand_ins!(RorB, <>),
    "rolb" <Operand> => single_operand_ins!(RolB, <>),
    "asrb" <Operand> => single_operand_ins!(AsrB, <>),
    "aslb" <Operand> => single_operand_ins!(AslB, <>),

    "swab" <Operand> => single_operand_ins!(Swab, <>),

    "nop" => cc_ins!(Nop),
    "clc" => cc_ins!(Clc),
    "clv" => cc_ins!(Clv),
    "clz" => cc_ins!(Clz),
    "cln" => cc_ins!(Cln),
    "sec" => cc_ins!(Sec),
    "sev" => cc_ins!(Sev),
    "sez" => cc_ins!(Sez),
    "sen" => cc_ins!(Sen),

    "emt" <Expr> => trap_ins!(Emt, <>),
    "emt" => trap_ins!(Emt, Expr::Atom(Atom::Val(0))),
    "trap" <Expr> => trap_ins!(Trap, <>),
    "trap" => trap_ins!(Trap, Expr::Atom(Atom::Val(0))),
};


// Doesn't support escapes
StrLiteral = r#""[^"]*""#;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Exprs = Comma<Expr>;

pub Cmd: Cmd = {
    ".byte" <Exprs> => Cmd::Bytes(<>),
    ".word" <Exprs> => Cmd::Words(<>),
    ".ascii" <s:StrLiteral> => Cmd::Ascii(s[1..s.len()-1].into()),
    ".asciz" <StrLiteral> => {
        // Remove quotes, add nul
        let mut v = <>.as_bytes().to_vec();
        v.remove(0);
        let len = v.len();
        v[len-1] = 0;
        Cmd::Ascii(v)
    },

    ".even" => Cmd::Even,

    I => Cmd::Ins(<>),

    <Symbol> "=" <Expr> => Cmd::SymbolDef(<>),
    "." "=" <Expr> => Cmd::LocDef(<>),
};

pub Stmt: Stmt = {
    <Symbol> ":" => Stmt::new(Some(<>), None),
    Cmd => Stmt::new(None, Some(<>)),
    <label_def: Symbol> ":" <cmd:Cmd> => Stmt::new(Some(label_def), Some(cmd)),
    () => Stmt::new(None, None),
}

match {
    // Skip comments
    r";[^\n\r]*" => { },
} else {
    // Ignore whitespace
    r"\s*" => { },
    _,
}
